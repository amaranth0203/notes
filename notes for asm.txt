文件结构
[commom]
[masm]



[commom]

push 地址时 机器码使用 68 后边跟一个 8 字节的地址 例如 68 69 30 40 00 ( push 00403060 )
push 双字常量          68           
push 字节时 机器码使用 6A 后边跟一个 字节的数值 例如 6A 00 ( push NULL )
push 数据段(.data)指定位置的双字时 机器码使用 FF 35 例如
    .data
    @hKey   dd  ?
    ...
    push    @hKey   ->   FF 35 69 30 40 00 ( push dword ptr ds:[ 00403069 ] ) 

addr vs offset
addr 是一个宏定义 先 lea 再 push , 速度比 offset 慢
addr 可以取得运行时的地址（例如局部变量）
offset 取得的是编译时候已经定义好的的地址（例如全局变量）
所以 :
addr 常用来取函数局部变量的地址 offset 常用来取全局变量的地址
addr 可以替代 offset 来取全局变量的地址（但速度会慢一些）
offset 不能代替 addr 来取局部变量（仍可以取全局变量）

把 byte ptr[ esi ] 的值赋给 eax 时
可以
xor eax , eax
mov al , bl
也可以直接使用
movzx eax , bl

movzx/movsx 区别
都是将窄位移到宽位
movZx 用 Zero 填充高位
movSx 保留 Sign 符号位( 高位全 0 或全 1 )

要使用 eax = ebx + 4
或者交换时传递地址  eax = esi + 4
不能直接
mov eax , ebx + 4
只能
mov eax , ebx
add eax , 4
或者是
lea eax , [ ebx + 4 ]
对于 lea
    lea eax , lable 相当于 C 的 eax = &lable
    所以此处的意思是 eax = *(&(ebx+4)) = ebx + 4

在函数里边对字符串操作时最好别用 eax 指向地址
使用 mov bl , byte ptr[esi] 代替
否则连续取两次会出错


使用寄存器之前清零
xor eax , eax

je
jne
一定要在 cmp 之后立即操作
不能在其间插入 inc mov 等操作

[masm]

proc 里边用到寄存器
可以在开头的时候一个个push
之后在结尾的时候逆序pop回去
也可以在开头使用 pushad
结尾使用 popad
保存八个通用寄存器
或者在 proc 的开头添加声明
xxx     proc use ebx ecx esi param1 , param2 

使用 call 之前要自己把参数 push 进去
然后到函数体里边要调用的时候 使用 dword ptr [esp + 4] 取得第一个参数
使用 invoke 的话就可以省略这一步骤(更加接近C)

使用 ReadConsole 读的时候
如果输入的字符串长度超过 bufferSize
则会在 bufferSize 处截断 并且在最后加上 13 10 5
注意比起 \r\n 多了个 5

link 的参数 
/subsystem:windows
/subsystem:console
windows 的话 不会有终端出现 但是和终端的函数用不了(即使是在终端下运行也不会有什么反应)
console 的话 可以使用和终端有关的函数 也可以使用 MessageBox 等

要在终端下输入和输出 要先调用
GetStdHandle 拿到输入和输出的句柄
(可选)之后调用 SetConsoleMode 和 SetConsoleCtrlHandle 来设置属性和处理消息的函数
之后使用 ReadConsole 和 WriteConsole 进行输入输出

在参数中当作 buffer 的参数
要定义成 
szBuffer    dd 1024 dup (?) ; 申请 1024 个 dd 的内存 但是不初始化 (?) 
之类的 不然会得到很奇怪的输出

.data? 是程序加载之后再申请的 所以不会增加 PE文件的大小( 区别于 .data )
