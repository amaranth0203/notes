分段：

*DBA :
...
*SQL :
...
*PL/SQL :
...
*安装 :
...


























*DBA :

cmd> sqlplus "/as sysdba"
cmd> sqlplus
...
请输入用户名: sys
输入口令: echo as sysdba  --以sys用户登录必须要加上 as sysdba

rlwrap sqlplus 连接之后可以用上下查看历史命令，用左右移动光标，用CTRL+L清屏但是
rlwrap模式下不能用tab键进行PL/SQL的缩进....orz（会自动补全）
把ed换成vim之后可以弥补这个缺陷……
  [oracle@rhel5 admin]$ vi $ORACLE_HOME/sqlplus/admin/glogin.sql
  在文件的末尾添加
  DEFINE _EDITOR         = "vim"
  这样我们在使用sqlplus的ed命令时就可以调用vi或vim编辑器了。
  （登录之后可以输入define来查看）

select * from dba_data_files ;
 -- 和表空间有关的东西
select name from v$datafile ;
 -- 查看表空间文件名
select text from user_views where view_name = 'v_$datafile'

show user ;
 -- 显示当前用户
conn scott/tiger ;
 -- 直接切换用户
select table_name from user_tables ;
 -- 查看当前用户下所有的表的名字
desc emp ;
 -- 查看emp表的所有字段

创建用户：
create tablespace wassup_ datafile '/u01/app/oracle/oradata/XE/wassup.dbf' size 500M ;
create user Ending identified by 199285 default tablespace wassup_ ;
grant create session , resource to Ending ;
grant dba,connect to Ending ;
 -- 三种角色 connect resource dba 各自包含的session => http://blog.csdn.net/jionjionyoushen/article/details/6803341
show user ;
help show ;
show all ;
收回权限
revoke create session from Ending ;
revoke dba from Ending ;
revoke resource from Ending ;
revoke connect from Ending ;
登录:ORA-01045: user ENDING lacks CREATE SESSION privilege; logon denied
grant create session to Ending ;
联接后不能执行:
select * from dba_data_files ;
select name from v$datafile ;
create talbe test_table( id int ) ;
grant create table to Ending ;之后
select * from dba_data_files ;（不能）
select name from v$datafile ;（不能）
create talbe test_table( id int ) ;（能，但还是失败因为表空间没有权限）
grant connect to Ending ;和上边相同
grant resource to Ending ;
查询表空间名字还是不可以但,可以建表了

复制数据库：
1-- backup scott
    $ exp
2-- create user
    SQL> create user liuchao identified by liuchao default tablesapce wassup_ quota 10M on wassup_ ;
    SQL> grant create session , create table , create view to liuchao ;
3-- import data
    $ imp ( 最后要输入一下scott）
select username from dba_users ;
 -- 查询已经存在的用户
drop user xxx cascade ;
 -- 删除用户
DROP TABLESPACE tablespace_name INCLUDING CONTENTS AND DATAFILES;
 -- 删除表空间

数据字典表：
desc user_tables ;
desc user_views ;
desc user_constraints ;
desc user_index ;
desc user_sequence ;
...
都存在了dictionary表里边
desc dictionary ;

select userenv('language') from dual ;
 -- 查看当前编码
export NLS_LANG=AMERICAN_AMERICA.UTF8
 -- 添加之后可以支持中文



























*SQL :

select 2*3 from dual ;
select sysdate from dual ;
select ename , sal*12 annual_sal from emp ;
select ename , sal*12 + comm from emp ; 
  --  会出现空值，因为空值和任何值操作都得空值
select ename || ' ' || sal from emp ;
select ename || ' what''s ' || sal from emp ;
select distinct deptno , job from emp ;（组合重复才去掉，顺序可能会变乱）
*	20 CLERK
	20 CLERK
*	30 SALESMAN
	30 SALESMAN
	30 SALESMAN
	30 SALESMAN
*	20 MANAGER
*	30 MANAGER
*	10 MANAGER
*	10 PRESIDENT
*	30 CLERK
*	20 ANALYST
	20 ANALYST
*	10 CLERK
select * from emp where ename = 'clark' ;
select * from emp where ename = 'CLARK' ;
 -- 结果不同
select ename , sal , deptno from emp where deptno <> 10 ;
select ename , sal from emp where sal between 800 and 1500 ;等同于
select ename , sal from emp where sal >= 800 and sal <= 1500 ;

select ename , sal , comm from emp where comm is null ;
select ename , sal , comm from emp where comm is not null ;
select ename , sal , comm from emp where sal in ( 800 , 1500 , 2000 ) ;
select ename , sal , comm from emp where ename in ( 'SMITH' , 'KING' , 'ABC' ) ;
select ename , sal , hiredate from emp where hiredate > '20-FEB-81' ;
select ename from emp where ename like '%ALL' ; -- ALL大小写敏感
select ename from emp where ename like '_A%' ;
select ename from emp where ename like '%\%%' ;（转义字符）
select ename from emp where ename like '%$%%' escape '$' ;（把转义字符换成'$')
select * from dept order by deptno ;
select * from dept order by deptno asc ; -- ( ascent )
select * from dept order by deptno desc ;  -- ( descent descript )
select empno , ename from emp where deptno <> 10 order by empno asc ;
select ename , sal , deptno from emp order by deptno asc , ename desc ; -- deptno都相同的时候，再按ename排列

select lower( ename ) from emp ;
select ename from emp where lower( ename ) like '_a%' ;
select substr( ename , 1 , 3 ) from emp ;  ( 第一个字母是1不是0 ， 3代表总长度)
select chr(65) from dual ;
select ascii( 'A' ) from dual ;
select round( 23.652 ) from dual ; -- 24
select round( 23.652 , 2 ) from dual ; -- 23.65
select round( 23.652 , 1 ) from dual ; -- 23.7
select round( 23.652 , -1 ) from dual ; -- 20
select to_char( sal , '$99,999.9999' ) from emp ;
select to_char( sysdate , 'YYYY-MM-DD HH:MI:SS' ) from dual ;
select to_char( sysdate , 'YYYY-MM-DD HH24:MI:SS' ) from dual ;
select sal from emp where sal > to_number( '$1,250.00' , '$9,999.99' ) ;
select ename , sal*12 , nvl( comm , 0 ) from emp ;
select to_char( avg( sal ) , '9999999.99' ) from emp ;
select round( avg( sal ) , 2 ) from emp ;
*组函数(group function)：
select max( sal ) from emp ;
select min( sal ) from emp ;
select avg( sal ) from emp ;
select sum( sal ) from emp ;
select count( * ) from emp ;
select count( comm ) from emp ; -- null的记录不计入
select count( distinct deptno ) from emp ;

select ename from emp where sal = ( select max( sal ) from emp ) ; -- 子查询
 -- 不能直接写select ename max( sal ) from emp ;因为max只有一个输出，拿最高薪水的ename可能有多个
 -- 从而……
select deptno max( sal ) from emp group by deptno ;
select ename max( sal ) from emp group by ename ;--是可以的
 -- group by 规则：出现在select列表中的字段，如果没有出现在group函数里边，必须出现在group by子句里边

select avg( sal ) , deptno from emp group by deptno
  having avg( sal ) > 2000 ;
 -- where 是对单条语句过滤，having 对分组之后的过滤（先执行where）
select sno from sc where scgrade < 60 group by sno having count( * ) >= 2 ;
 -- 找出不及格课程大于（包含）两门课程的学生的sno
select deptno from emp where sal > 2000 group by deptno having count( * ) >= 2 ;
 -- 找出部门中薪水大于2000的人数超过两人的部门的deptno
执行顺序：
  select -> where -> group by -> having -> order by 



select ename , sal from emp
join ( select max( sal ) max_sal , deptno from emp group by deptno ) t
on ( emp.sal = t.max_sal and emp.deptno = t.deptno ) ;
 ---- 每个部门里边最大薪水

笛卡尔乘积：
select ename , dname from emp , dept ; -- 1992
select ename , dname from emp cross join dept ; -- 1999
内连接：
select ename , dname from emp , dept where emp.deptno = dept.deptno ; -- 1992
select ename , dname from emp join dept on( emp.deptno = dept.deptno ) ; -- 1999
 -- 等值连接可省为：
select ename , dname from emp join dept using( deptno ) ; -- 不推荐
(新的写法是为了让where专注于数据过滤，on专注于连接条件）

SQL> select e1.ename , e2.ename     
  2  from emp e1 left outer join emp e2 -- outer 可省略
  3  on ( e1.mgr = e2.empno ) ;
会把左边（e1）那张表的值都列出来
（如果是直接join，e2有空值的时候e1对应的就不会显出来了）
外连接：
select ename , dname from emp full join dept on( emp.deptno = dept.deptno ) ;

  1  select deptno , avg_sal , grade
  2  from salgrade s join
  3   ( select deptno , avg( sal ) avg_sal from emp group by deptno ) t
  4* on ( t.avg_sal between s.losal and s.hisal )
 ---- 部门平均薪水的等级（先求部门平均薪水，再求等级）

  1  select deptno , avg( grade ) avg_grade from
  2  (
  3	 select deptno , grade
  4	 from emp join salgrade
  5	 on( sal between losal and hisal )
  6  )
  7* group by deptno
 ---- 部门平均的薪水等级（先求等级数值，再求每个部门的等级数值平均值）

  1  select mgr from
  2  (
  3	 select e1.ename , e2.ename mgr
  4	 from emp e1 join emp e2
  5	 on( e1.mgr = e2.empno ) -- 每个人的经理
  6  )
  7* group by mgr
另一个解：
select ename from emp where empno in( select mgr from emp ) ;
select ename from emp where empno in( select distinct mgr from emp ) ;
 ---- 雇员中有哪些人是经理人

  1  select sal
  2  from emp
  3  where sal not in
  4  (
  5	 select distinct e1.sal
  6	 from emp e1
  7	 join( select sal from emp ) e2
  8	 on( e1.sal < e2.sal )
  9* )
select sal from emp order by sal desc top 1
(由于where比order先执行）->
  select sal from (
    select sal from emp order by sal desc
  ) where rownum <= 1
 ---- 不准用组函数，求薪水的最高值

  1  select t2.deptno from
  2  (
  3	 select max( avg_sal ) max_avg
  4	 from( select avg( sal ) avg_sal , deptno from emp group by deptno )
  5  ) t1
  6  join
  7  (
  8	 select avg( sal ) avg_sal , deptno from emp group by deptno
  9  ) t2
 10  on
 11  (
 12	 t1.max_avg = t2.avg_sal
 13* )
  1  select deptno from
  2  (
  3	select avg( sal ) avg_sal , deptno from emp group by deptno
  4  )
  5  where avg_sal =
  6  (
  7	 select max( avg_sal ) max_avg
  8	 from( select avg( sal ) avg_sal , deptno from emp group by deptno )
  9* )
 ---- 求平均薪水最高的部门的部门编号

（利用上一题的结果：）
  1  select dname from dept where deptno =
  2  (
  3	 select deptno from
  4	 (
  5	    select avg( sal ) avg_sal , deptno from emp group by deptno
  6	 )
  7	 where avg_sal =
  8	 (
  9	     select max( avg_sal ) max_avg
 10	     from( select avg( sal ) avg_sal , deptno from emp group by deptno )
           -- 可以写成 select max(avg(sal)) from emp group by deptno --组函数嵌套（最多两层）
 11	 )
 12* )
 ---- 求平均薪水最高的部门的部门名称

  1  select dname , t1.deptno , avg_sal , grade
  2  from dept
  3  join
  4  (
  5	 select deptno , grade , avg_sal from
  6	 (
  7	     select avg( sal ) avg_sal , deptno from emp group by deptno
  8	 ) t_avg
  9	 join salgrade s
 10	 on
 11	 (
 12	     t_avg.avg_sal between s.losal and s.hisal
 13	 )
 14  ) t1
 15  on
 16  (
 17	 dept.deptno = t1.deptno
 18  )
 19  where t1.grade =
 20  (
 21	 select min( grade ) from
 22	 (
 23	     select deptno , grade from
 24	     (
 25		 select avg( sal ) avg_sal , deptno from emp group by deptno
 26	     ) t_avg
 27	     join salgrade s
 28	     on
 29	     (
 30		 t_avg.avg_sal between s.losal and s.hisal
 31	     )
 32	 )
 33* )

conn sys/echo as sysdba
grant create table , create view to scott ;
conn scott/tiger
  1  create view v$_dept_avg_sal_info as
  2  select deptno , grade , avg_sal from
  3  (
  4	 select avg( sal ) avg_sal , deptno from emp group by deptno
  5  ) t_avg
  6  join salgrade s
  7  on
  8  (
  9	 t_avg.avg_sal between s.losal and s.hisal
 10* )
之后，就可以简化成：
  1  select dname , t1.deptno , grade , avg_sal
  2  from dept
  3  join v$_dept_avg_sal_info t1
  4  on( dept.deptno = t1.deptno )
  5  where t1.grade =
  6  (
  7	 select min( grade ) from v$_dept_avg_sal_info
  8* )
 ---- 求平均薪水的等级最低的部门的部门名称
--视图就是一个子查询

 ---- 求部门经理人中平均薪水最低的部门名称

  1  select ename from emp
  2  where empno in
  3  (
  4	 select distinct mgr from emp where mgr is not null
  5  )
  6  and sal >
  7  (
  8	 select max( sal ) from emp where empno not in
  9	 (
 10	     select distinct mgr from emp where mgr is not null
 11	 )
 12* )
 ---- 求比普通员工的最高薪水还要高的经理人名称

rownum 只能接 <  <= , 不能接 = > >= <> (但是可以用一个子查询:)
select ename from ( select rownum r , ename from emp ) where r > 10 ;

  1  select ename , sal from
  2  (
  3	 select ename , sal from emp order by sal desc
  4  )
  5* where rownum <= 5
 ---- 求薪水最高的前5名雇员

  1  select ename , sal from
  2  (
  3	 select ename , sal , rownum r from
  4	 (
  5	     select ename , sal from emp order by sal desc
  6	 )
  7  )
  8* where r between 6 and 10
 ---- 求薪水最高的第6到第10名雇员

--比较效率：
 select * from emp where deptno = 10 and ename like '%A%' ;
 select * from emp where ename like '%A%' and deptno = 10 ;
对数字的比较效率会高一些（实际中oracle可能会对select语句进行优化）

create table dept2 as select * from dept ;
 -- 从dept里边复制数据，创建一张dept2表（类似备份）

insert into dept2 values( 50 , 'game' , 'Beijing' ) ;
insert into dept2( deptno , dname ) values ( 60 , 'game2' ) ;
insert into dept2 select * from dept ;

update emp2 set sal = sal * 2 , ename = ename || '-' 
  where deptno = 10 ;
delete from dept2
  where deptno < 25 ;

create table t ( a varchar2( 10 ) ) ;
desc t ;
drop table t ;

transaction起始于DML语句（一系列）
exit 或 DDL DCL(grand)(控制语句) 或 commit 时，transaction自动提交

（和varchar2比起来，char是定长的，定长数据查找效率比较高）

create table class
(
    id number( 4 ) primary key ,
    name varchar2( 20 ) not null	
);
create table stu
(
    id number( 6 ) ,
    name varchar2( 20 ) constraint stu_name_nn not null ,
 -- 字段级约束:不为空
    sex number( 1 ) ,
    age number( 3 ) ,
    sdate date ,
    grade number( 2 ) default 1 ,
    class number( 4 ) ,
 -- class number( 4 ) references class( id ) ,
 -- 字段级外键
    email varchar2( 50 ) ,
    constraint stu_class_fk foreign key( class ) references class( id ) ,
 -- 表级外键
    constraint stu_id_pk primary key( id ) ,
    constraint stu_name_email_uni unique( email , name )
 -- 表级约束( 组合不重复就行 ）
);
约束类型 ：  
 * not null 
 * unique ( 可以插多个null , oracle不认为 null 重复）
 * primary key ( unique + not null )
 * foreign key ( 被参考的字段必须是主键 )
 * check

alter table stu add( addr varchar2( 100 ) ) ;
alter table stu modify( addr varchar2( 150 ) ) ;
alter table stu drop( addr ) ;
alter table stu drop constraint stu_class_fk ;
alter table stu add constraint stu_class_fk foreign key ( class ) references class( id ) ;

索引：（优化的时候）
create index idx_stu_email on stu( email ) ;
唯一/主键会自动建索引
drop index idx_stu_email ;
建立索引之后：查找之后更加块，但是插入数据的时候会变慢

视图：
视图就是一个子查询，可以简化查询，可以隐藏想要隐藏的信息
create view v$_stu as select id , name , age from stu ;
但是视图会增加维护代价

  1  create table article
  2  (
  3	 id number ,
  4	 title varchar2( 1024 ) ,
  5	 cont long
  6* )

sequence(oracle自己的)
create sequence seq ;
insert into article values( seq.nextval , 'a' , 'b' ) ;
insert into article values( seq.nextval , 'a' , 'b' ) ;
insert into article values( seq.nextval , 'a' , 'b' ) ;






























*PL/SQL:

SQL> set serveroutput on ;
  -- 否则没输出
SQL> message varchar2( 20 ):=
                           -- 此处不能写成) :=


Date Type : Scalar & Large Object & Composite & Reference
	Scalar : Numeric & Character & Boolean & Datetime
		Numeric : INT, FLOAT, REAL, DOUBLE PRECISION and so on
		Character : CHAR , VARCHAR , VARCHAR2 LONG and so on
		Boolean : TRUE , FALSE and NULL
		Datetime : DATE( YEAR , MONTH , DAY , HOUR and so on )
	Large Object : BFILE & BLOB & CLOB & NCLOB
		BFILE : large binary objects, not exceed 4 gigabytes , outside the database
		BLOB : large binary objects, 8 to 128 terabytes , inside the database
		CLOB : large blocks of character, 8 to 128 TB , inside
		NCLOB : large blocks of NCHAR , 8 to 128 TB , inside


NULL != NULL ( equals to nothing )

variable name 	should not exceed 30 characters
		not case-sensitive

declare
	a number( 3 , 1 ) := 22.1 --一共三位，小数一位
begin
	null ;
end ;
/

variable( /veriable/ )

每次都直接在SQL>中输过程，一旦错了，之前的都白输，于是想到写在.sql文件里，用sqlplus @ 执行
但是又有一大堆的欢迎信息和版本信息混在里边，就想写个脚本。。还是有。。最后
sqlplus -S 拯救世界

每次登录都要设置serveroutput on （或者写在脚本第一行。。)，于是：
SQL> set serveroutput on ;
SQL> store set $ORACLE_HOME/sqlplus/admin/glogin.sql replace
退出再登录
SQL> show serveroutput ;
serveroutput ON SIZE UNLIMITED FORMAT WORD_WRAPPED

SQL> prompt 'hello world"
'hello world"

PL/SQL 里边的between是 a <= x <= b

letter := 'm' ;

letter = null    =>   False
letter <> null   =>   False
letter is null   =>   False
null = null      =>   False
null <> null     =>   False
null is null     =>   False
 ==>  判定null的时候用 'is null'

pl/sql 和 ruby 一样 , 用的是 if elsif end if , 而不是 python 的 elif

IF x > 50 THEN exit ; END IF ;

dbms_output.put( '.sd,fjlksdhfak' ) ;
只是输出到缓冲区，之后要用
dbms_output.new_line ; 或者
dbms_output.put_line( ' ' ) ;
清空缓存
 -- 用dbms_output.put( chr( 10 ) )
 --   dbms_output.put( chr( 13 ) )
 --   dbms_output.put( chr( 13 ) || chr( 10 ) )
 -- 都没用

str1 char( 30 ) := 'aaa' ;
str2 varchar( 30 ) := 'aaa' ;
str3 varchar2( 30 ) := 'aaa' ;然后:
length( str1 ) = 30 , length( str2 ) = 3 , length( str3 ) = 3
lengthb( str1 ) = 30 , lengthb( str2 ) = 3 , lengthb( str3 ) = 3

str1 char( 30 ) := '阿阿阿' ;
str2 varchar( 30 ) := '阿阿阿' ;
str3 nvarchar2( 30 ) := '阿阿阿' ;
length( str1 ) = 12 , length( str2 ) = 9 , length( str3 ) = 9
lengthb( str1 ) = 30 , lengthb( str2 ) = 27 , length( str3 ) = 18

- -好混乱

SQL> create or replace type testarray as varray( 3 ) of varchar2( 10 ) ;
  2  /
Type created.
而
SQL> DECLARE
  2  	type testarray is varray( 3) of varchar2( 11 ) ;
  3  BEGIN
  4  	null ;
  5  END ;
  6  /
PL/SQL procedure successfully completed.


select text from user_source ;
 -- 可以查看之前create or replace 的type,procedure


procedure的三个参数 IN & OUT & IN OUT
 IN	: 只能用来赋值( 等号右边 )
 OUT	: 只能用来被赋值( 等号左边 )
 IN OUT : 两者都可以
如果在过程中弄了个 out = out 
不会报错
但是没结果
  1 DECLARE
  2     a number ;
  3     b number ;
  4  -- PROCEDURE test( a IN OUT number , b OUT NUMBER ) IS
  5 PROCEDURE test( a OUT number , b OUT NUMBER ) IS
  6 BEGIN
  7     b := a ;
  8 END ;
  9 BEGIN
 10     a := 3 ;
 11     test( a , b ) ;
 12     dbms_output.put_line( b ) ;
 13 END ;
 14 /
注意第四行和第五行
两个都能达到PL/SQL procedure successfully completed.的效果但
用第四行有输出
用第五行没有输出

select table_name from user_table ;
describe $(TABLE_NAME) ;

procedure aaa ( x in number ) is
BEGIN
	null ;
END ;

function bbb ( x in number ) RETURN number is
BEGIN
	null ;
END ;


CREATE OR REPLACE FUNCTION total Customers
RETURN number IS
	total number( 2 ) := 0 ;
BEGIN
	null ;
END ;

cursor customer_cor is 
	select * from customers ;
customer_rec customers %rowtype ;	( Table-Based )
customer_rec customer_cur %rowtype ;	( Cursor-Based )
type books is RECORD
(
	title varchar2( 50 ) ,
	author varchar2( 50 ) 
) ;
book1 books ;
book2 books ;

cursor => 指针
record => 结构体

Triggers are written to be executed in response to any of the following events :
A database manipulation (DML) statement( DELETE , INSERT , or UPDATE ).
A database definition (DDL) statement( CREATE , ALTER , or DROP )
A database operation( SERVERERROR, LOGIN, LOGOFF, STARTUP, or SHUTDOWN )

编译出错可以用 show errors来查看具体错误（ 简写: sho err ; )
 -- 行号比较混乱。。。
 -- 在EXCEPTION块中输出 dbms_utility.format_error_backtrace 可以查看具体行数（没试过）

INSERT 之前判断是否存在:
DECLARE
	a int ;
BEGIN
	select count( * ) into a from customers where id = 1 ;
	if a = 0 then
		-- not exist
	else
		-- exist
	end if ;
end ;
/

type test_table is table of number index by [varchar2(20)|binary-integer] ;
type test_talbe is table of number ;
 -- 有index的是index-by talbe ( 类似字典 )
 -- 没有index的是nested table ( 链表数组 )

类里边的 map member function func_name return number ;
是用来实现比较的..函数名可以随便起
order member类似,一个类里边map和order只能取二者其一

NOT FINAL -- 可以继承
OVERRIDING MEBER ... IS -- 继承的时候用于重写
NOT INSTANTIABLE -- 实现抽象类

----------------------------------------plsql_tutorial
                                        2014-12-02

P(rocedure)L(anguage)
变量名字以为v_开头： v_name varchar2(20) ;

结构（四个块）：
  1  declare
  2	 v_num number := 0 ;
  3  begin
  4	 v_num := 2/v_num ;
  5	 dbms_output.put_line( v_num ) ;
  6  exception
  7	 when others then
  8	     dbms_output.put_line( '[-] error' ) ;
  9* end ;

v_name最多30个字符，每一行声明一个
常用类型：
    binary_integer	整数(for里边记数,数组下标的时候用效率会高一些）
    number		数字
    char		定长字符串
    varchar2		变长字符长
    date		日期
    long		长字符串，最长2GB
    boolean		布尔类型 true false null -- 没有初始值就是null，所以用的时候最好都给个初始值
dbms_output.put_line 不能打印boolean ;
  1  declare
  2	 v_temp number( 1 ) ;
  3	 v_count binary_integer := 0 ;
  4	 v_sal number( 7 , 2 ) := 4000.00 ;
  5	 v_date date := sysdate ;
  6	 v_pi constant number( 3 , 2 ) := 3.14 ;
  7	 v_valid boolean := false ;
  8	 v_name varchar2( 20 ) := 'MyName' ;
  9  begin
 10	 dbms_output.put_line( 'v_temp value:' || v_name ) ;
 11* end ;

  1  declare
  2	 v_empno number( 4 ) ;
  3	 v_empno2 emp.empno % type ;
  4	 v_empno3 v_empno2 % type ;
  5  begin
  6	 dbms_output.put_line( '[+] test' ) ;
  7* end ;

Table(相当于java的数组)
  1  declare
  2	 type type_table_emp_empno is table of emp.empno%type index by binary_integer ;
  3	 v_empnos type_table_emp_empno ;
  4  begin
  5	 v_empnos( 0 ) := 7369 ;
  6	 v_empnos( 2 ) := 7839 ;
  7	 v_empnos( -1 ) := 9999 ;
  8	 dbms_output.put_line( v_empnos( -1 ) ) ;
  9* end ;

Record(常用的是%rowtype）（相当于java的类，对数据的封装）
  1  declare
  2	 type type_record_dept is record
  3	 (
  4	     deptno dept.deptno%type ,
  5	     dname dept.dname%type ,
  6	     loc dept.loc%type
  7	 ) ;
  8  --    v_temp type_record_dept ;
  9	 v_temp dept%rowtype ;
 10  begin
 11	 v_temp.deptno := 50 ;
 12	 v_temp.dname := 'aaaa' ;
 13	 v_temp.loc := 'Beijing' ;
 14	 dbms_output.put_line( v_temp.deptno || ' ' || v_temp.dname ) ;
 15* end ;

不用游标的sql语句：
  1  declare
  2	 v_ename emp.ename%type ;
  3	 v_sal emp.sal%type ;
  4  begin
  5	 select ename , sal into v_ename , v_sal from emp where empno = 7369 ;
  6	 dbms_output.put_line( v_ename || ' ' || v_sal ) ;
  7* end ;

  1  declare
  2	 v_emp emp%rowtype ;
  3  begin
  4	 select * into v_emp from emp where empno = 7369;
  5	 dbms_output.put_line( v_emp.ename ) ;
  6* end ;

 -- 和into一起用的时候要保证select必须有记录返回并且记录只有一条（有且只有一条）

insert要commit :
  1  declare
  2	 v_deptno dept.deptno%type := 50 ;
  3	 v_dname dept.dname%type := 'aaaa' ;
  4	 v_loc dept.loc%type := 'bj' ;
  5  begin
  6	 insert into dept2 values( v_deptno , v_dname , v_loc ) ;
  7	 commit ;
  8* end ;

  1  declare
  2	 v_deptno emp2.deptno%type := 10 ;
  3	 v_count number ;
  4  begin
  5	 -- update emp2 set sal = sal/2 where deptno = v_deptno ;
  6	 -- select deptno into v_deptno from emp2 where empno = 7369 ;
  7	 select count( * ) into v_count from emp2 ;
  8	 dbms_output.put_line( sql%rowcount || '条记录被影响' ) ;
  9	 commit ;
 10* end ;
select 被影响的条数永远是1

DDL语句需要execute immediate :
  1  begin
  2	 execute immediate 'create table T (nnn varchar2(20) default ''aaa'')' ;
  3* end ;

分支：
  1  declare
  2	 v_sal emp.sal%type ;
  3  begin
  4	 select sal into v_sal from emp
  5	     where empno = 7369 ;
  6	 if( v_sal < 1200 ) then
  7	     dbms_output.put_line( 'low' ) ;
  8	 elsif( v_sal < 2000 ) then
  9	     dbms_output.put_line( 'middle' ) ;
 10	 else
 11	     dbms_output.put_line( 'high' ) ;
 12	 end if ;
 13* end ;

循环(都是以loop开头end loop;结尾)：
do-while循环：
  1  declare
  2	 i binary_integer := 1 ;
  3  begin
  4	 loop
  5	     dbms_output.put_line( i ) ;
  6	     i := i + 1 ;
  7	     exit when( i >= 11 ) ;
  8	 end loop ;
  9* end ;
while循环：
  1  declare
  2	 j binary_integer := 1 ;
  3  begin
  4	 while j < 11 loop
  5	     dbms_output.put_line( j ) ;
  6	     j := j + 1 ;
  7	 end loop ;
  8* end ;
for循环：
  1  begin
  2	 for k in 1..10 loop
  3	     dbms_output.put_line( k ) ;
  4	 end loop ;
  5	 for k in reverse 1..10 loop
  6	     dbms_output.put_line( k ) ;
  7	 end loop ;
  8* end ;

异常：
  1  declare
  2	 v_temp number( 4 ) ;
  3  begin
  4	 select empno into v_temp from emp where deptno = 10 ;
  5  exception
  6	 when too_many_rows then
  7	     dbms_output.put_line( '[+] too many record' ) ;
  8	 when others then
  9	     dbms_output.put_line( '[+] others exception' ) ;
 10* end ;

  1  declare
  2	 v_temp number( 4 ) ;
  3  begin
  4	 select empno into v_temp from emp where empno = 2222 ;
  5  exception
  6	 when no_data_found then
  7	     dbms_output.put_line( '[-] no data found' ) ;
  8* end ;

错误处理（记录）：
  1  create table errorlog
  2  (
  3	 id number primary key ,
  4	 errcode number ,
  5	 errmsg varchar2( 1024 ) ,
  6	 errdate date
  7* )

create sequence seq_errorlog_id start with 1 increment by 1 ;

  1  declare
  2	 v_deptno dept.deptno%type := 10 ;
  3	 v_errcode number ;
  4	 v_errmsg varchar2( 1024 ) ;
  5  begin
  6	 delete from dept where deptno = v_deptno ;
  7	 commit ;
  8  exception
  9	 when others then
 10	     rollback ;
 11	     v_errcode := SQLCODE ;
 12	     v_errmsg := SQLERRM ;
 13	     insert into errorlog values(
 14		 seq_errorlog_id.nextval ,
 15		 v_errcode ,
 16		 v_errmsg ,
 17		 sysdate
 18	     ) ;
 19	     commit ;
 20* end;

再select * from errorlog ;就可以看到错误的记录了

*游标:
游标四个属性：
isopen
notfound
found
rowcount
  1  declare
  2	 cursor c is
  3	     select * from emp ;
  4	 v_emp c%rowtype ;
          -- 一个record
  5  begin
  6	 open c ;
  7	     fetch c into v_emp ;
  8	     dbms_output.put_line( v_emp.ename ) ;
  9	 close c ;
 10* end ;
加入循环：
  1  declare
  2	 cursor c is
  3	     select * from emp ;
  4	 v_emp c%rowtype ;
  5  begin
  6	 open c ;
  7	     loop
  8		 fetch c into v_emp ;
  9		 exit when( c%notfound ) ;
 10		 dbms_output.put_line( v_emp.ename ) ;
 -- 注意上边三条语句的顺序
 11	     end loop ;
 12	 close c ;
 13* end ;

  1  declare
  2	 cursor c is
  3	     select * from emp ;
  4	 v_emp c%rowtype ;
  5  begin
  6	 open c ;
  7	     fetch c into v_emp ;
  8	     while( c%found ) loop
  9		 dbms_output.put_line( v_emp.ename ) ;
 10		 fetch c into v_emp ;
 11	     end loop ;
 12	 close c ;
 13* end ;

  1  declare
  2	 cursor c is
  3	     select * from emp ;
  4  begin
  5	 for v_emp in c loop
  6	     dbms_output.put_line( v_emp.ename ) ;
  7	 end loop ;
  8* end ;
 -- for自动打开fetch和close，v_emp也自动帮着声明
 -- 所以for循环用得最多
带参数的游标：
  1  declare
  2	 cursor c
  3	 (
  4	     v_deptno emp.deptno%type ,
  5	     v_job emp.job%type
  6	 ) is
  7	     select ename , sal from emp
  8	     where deptno = v_deptno and job = v_job ;
  9  begin
 10	 for v_temp in c( 30 , 'CLERK' ) loop
 11	     dbms_output.put_line( v_temp.ename ) ;
 12	 end loop ;
 13* end ;
用于更新数据的游标（用得比较少）：
  1  declare
  2	 cursor c is
  3	     select * from emp2 for update ;
  4  begin
  5	 for v_temp in c loop
  6	     if( v_temp.sal < 2000 ) then
  7		 update emp2 set sal = sal * 2 where current of c ;
  8	     elsif( v_temp.sal = 5000 ) then
  9		 delete from emp2 where current of c ;
 10	     end if ;
 11	 end loop ;
 12	 commit ;
 13* end ;
 14  /

存储过程( store procedure ) :
把declare换成 create or repalce procedure p is :
  1  create or replace procedure p
  2  is
  3	 cursor c is
  4	     select * from emp2 for update ;
  5  begin
  6	 for v_emp in c loop
  7	     if( v_emp.deptno = 10 ) then
  8		 update emp2 set sal = sal + 10 where current of c ;
  9	     elsif( v_emp.deptno = 20 ) then
 10		 update emp2 set sal = sal + 20 where current of c ;
 11	     else
 12		 update emp2 set sal = sal + 50 where current of c ;
 13	     end if ;
 14	 end loop ;
 15	 commit ;
 16* end ;

执行：
    exec p ;
或者用
    begin
        p ;
    end ;
    /
去执行

select sal from emp2 ;即可看到效果

带参数的存储过程:
参数类型：
in（默认）
out
in out
  1  create or replace procedure p
  2  (
  3	 v_a in number ,
  4	 v_b number ,
  5	 v_ret out number ,
  6	 v_temp in out number
  7  )
  8  is
  9  begin
 10	 if( v_a > v_b ) then
 11	     v_ret := v_a ;
 12	 else
 13	     v_ret := v_b ;
 14	 end if ;
 15	 v_temp := v_temp + 1 ;
 16* end ;
调用：
  1  declare
  2	 v_a number := 3 ;
  3	 v_b number := 4 ;
  4	 v_ret number ;
  5	 v_temp number := 5 ;
  6  begin
  7	 p( v_a , v_b , v_ret , v_temp ) ;
  8	 dbms_output.put_line( v_ret ) ;
  9	 dbms_output.put_line( v_temp ) ;
 10* end ;

出现Warning: Procedure created with compilation errors.的时候
可以用show error查看哪行错了……
(就算语法出错了这个过程也会被创建（之后执行的时候就按出错的语法执行= =）)

function
也存储在user_procedures表里边
  1  create or replace function sal_tax
  2	 ( v_sal number )
  3	 return number
  4  is
  5  begin
  6	 if( v_sal < 2000 ) then
  7	     return 0.10 ;
  8	 elsif( v_sal < 2750 ) then
  9	     return 0.15 ;
 10	 else
 11	     return 0.20 ;
 12	 end if ;
 13* end ;

 select lower( ename ) , sal_tax( sal ) from emp ;


Trigger :
  1  create table emp2_log
  2  (
  3	 uname varchar2( 20 ) ,
  4	 action varchar2( 10 ) ,
  5	 atime date
  6* )

  1  create or replace trigger trig
  2	 after insert or delete or update on emp2 for each row
 -- 如果没有 for each row 下边更新六行的时候log里边只有一条记录
  3  begin
  4	 if inserting then
  5	     insert into emp2_log values ( USER , 'insert' , sysdate ) ;
  6	 elsif updating then
  7	     insert into emp2_log values ( USER , 'update' , sysdate ) ;
  8	 elsif deleting then
  9	     insert into emp2_log values ( USER , 'delete' , sysdate ) ;
 10	 end if ;
 11* end;

SQL> update emp2 set sal=sal*2 where deptno = 30 ; 
 -- 会更新六行

修改外键的时候可以用trigger

  1  create or replace trigger trig
  2	 after update on dept
  3	 for each row
  4  begin
  5	 update emp set deptno = :NEW.deptno where deptno = :OLD.deptno ;
 -- 注意这里的 :NEW 是一个关键字，= : 不是赋值
  6* end ;
之后就可以执行
SQL> update dept set deptno = 99 where deptno = 10 ;
(用的情况比较少)
-> 先触发触发器再检查约束条件

recursion :
  1  create table article
  2  (
  3	 id number primary key ,
  4	 cont varchar2( 4000 ) ,
  5	 pid number ,
  6	 isleaf number( 1 ) ,
  7	 alevel number( 2 )
  8* )

insert into article values ( 1 , '蚂蚁大战大象' , 0 , 0 , 0 ) ;
insert into article values ( 2 , '大象被打趴下了' , 1 , 0 , 1 ) ;
insert into article values ( 3 , '蚂蚁也不好过' , 2 , 1 , 2 ) ;
insert into article values ( 4 , '瞎说' , 2 , 0 , 2 ) ;
insert into article values ( 5 , '没有瞎说' , 4 , 1 , 3 ) ;
insert into article values ( 6 , '怎么可能' , 1 , 0 , 1 ) ;
insert into article values ( 7 , '怎么没有可能' , 6 , 1 , 2 ) ;
insert into article values ( 8 , '可能性是很大的' , 6 , 1 , 2 ) ;
insert into article values ( 9 , '大象进医院了' , 2 , 0 , 2 ) ;
insert into article values ( 10 , '护士是蚂蚁' , 9 , 1 , 3 ) ;
蚂蚁大战大象
  大象被大趴下了
    蚂蚁也不好过
    瞎说
      没有瞎说
  怎么可能
    怎么没有可能
    可能性是很大的
  大象进医院了
    护士是蚂蚁
  1  create or replace procedure p ( v_pid article.pid%type , v_level binary_integer ) is
  2	 cursor c is select * from article where pid = v_pid ;
  3	 v_preStr varchar2( 1024 ) := '' ;
  4  begin
  5	 for i in 1..v_level loop
  6	     v_preStr := v_preStr || '--' ;
  7	 end loop ;
  8	 for v_article in c loop
  9	     dbms_output.put_line( v_preStr || v_article.cont ) ;
 10	     if( v_article.isleaf = 0 ) then
 11		 p( v_article.id , v_level+1 ) ;
 12	     end if ;
 13	 end loop ;
 14* end ;
SQL> exec p( 0 , 0 ) ;
蚂蚁大战大象
--大象被打趴下了
----蚂蚁也不好过
----瞎说
------没有瞎说
----大象进医院了
------护士是蚂蚁
--怎么可能
----怎么没有可能
----可能性是很大的
:: 空格会被自动去掉所以用'-'代替
































*安装：

telnet到windows之后使用sqlplus进行操作,把终端编码改成gbk中文不乱码了，但是退格要用ctrl+h，而且输入之后的反映速度感觉很慢
于是就在kali下装了oracle database 11g
aptitude install alien
alien oracle-xe-11.2.0-1.0.x86_64.rpm
dpkg -i oracle-xe_11.2.0-2_amd64.deb
export ORACLE_HOME=/u01/app/oracle/product/11.2.0/xe
export ORACLE_SID=oracle11g
chmod /etc/init.d/oracle-xe
/etc/init.d/oracle-xe configure
/etc/init.d/oracle-xe status( 出错…… )
groupadd oinstall
groupadd dba
mkdir /u01/oracle
useradd -g oinstall -G dba -d /u01/oracle oracle
chown -R oracle:oinstall /u01
passwd oracle
/etc/init.d/oracle-xe status( 无效…… )
/etc/init.d/oracle-xe force-restart( 提示无法访问一个文件…… )
mkdir /var/lock/subsys
/etc/init.d/oracle-xe force-restart( 成功 )
/etc/init.d/oracle-xe status( 还是出错，不过出现了版本号 )
chmod 6775 $ORACLE_HOME/bin/oracle
再登，成功
 -- oracle设计的时候就不允许使用root登录，所以需要切换到oracle用户去
SQL> startup ;
ORA-01078: failure in processing system parameters
LRM-00109: could not open parameter file '/u01/app/oracle/product/11.2.0/xe/dbs/initoracle11g.ora'
cd $ORACLE_HOME/dbs
cp init.ora initoracle11g.ora
 -- 因为之前 export ORACLE_SID=oracle11g
vim oracle11g
 把里边三个<ORACLE_BASE>都替换成实际目录: /u01/app/oracle
SQL> startup ;
ORA-00845: MEMORY_TARGET not supported on this system
 -- 失败…………
准备安装oracle 12c :
dpkg -P oracle-xe
rm -r /home/oracle
userdel oracle
( rm /etc/init.d/oracle-xe rm /usr/bin/sqlplus )

useradd -d /home/oracle -m -c "Oracle Database" -g oinstall -G dba -s /bin/bash oracle
mkdir /opt/oracle
mkdir /opt/oraInventory
mkdir /oradata
chown oracle:dba /opt/oracle /opt/oraInventory /oradata
xhost +
mkdir /usr/lib64
ln -s /usr/bin/awk /bin/awk
ln -s /usr/lib/x86_64-linux-gnu/libpthread_nonshared.a /usr/lib64/
ln -s /usr/lib/x86_64-linux-gnu/libc_nonshared.a /usr/lib64/
ln -s /lib/x86_64-linux-gnu/libgcc_s.so.1 /lib
ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /usr/lib64/
su - oracle
for f in *.zip ; do unzip $f; done
cd database/
(临时)export DISPLAY=:0.0
export ORACLE_BASE=/opt/oracle
export ORACLE_HOME=$ORACLE_BASE/product/12.1.0.1.0
export PATH=$PATH:$ORACLE_HOME/bin
(临时)export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib64
./runInstaller

“install the database software only” 只安装数据库软件
“single instance database installation” 只安装单个数据库实例, 不搞什么集群,分布式,那些太高端了;-)


安装到95%的时候会让切换到root去执行两个脚本

安装完之后
dbca
创建表什么的，后来提示 ORA-27104:system-defined limits for shared memory was misconfigured
google之后。。。
修改 /etc/sysctl.conf :
	kernel.shmall = 18350080
	kernel.shmmax = 75161927680
	kernel.shmmni = 4096
	kernel.sem = 250 32000 100 128
接着
sysctl -p
再运行dbca就成功了

接着启动:
lsnrctl start
lsnrctl status

sqlplus '/as sysdba' 提示:
ORA-12162: TNS:net service name is incorrectly specified
export ORACLE_SID=oracle12c
sqlplus '/as sysdba'
SQL> 
SQL> startup ; 提示:
ORA-01078: failure in processing system parameters
LRM-00109: could not open parameter file '/opt/oracle/product/12.1.0.1.0/dbs/initoracle12c.ora'
照上边的更改，结果。。。
SQL> startup ;
ORA-00845: MEMORY_TARGET not supported on this system
(掀桌)


最后用runInstall 的deinstall参数把12c又卸载掉了QAQ




再次安装11g
配置。。
依然出错。。
最后。。。。。。。
把。。。。。。。
export ORACLE_SID=oracle11g
改成
export ORACLE_SID=XE
保存退出再登录。。。

QAQ！！！

终于成功了
			2014-11-29


结果今早起床之后，启动oracle。。。又出现：
touch: cannot touch `/var/lock/subsys/listener': No such file or directory
没有目录，那我就给你个目录
mkdir /var/lock/subsys
成功启动，但是登不进去，估计是root用户
于是切到oracle用户还是登不进去
试着startup :
ORA-00845: MEMORY_TARGET not supported on this system
-____
cd /dev/shm ; ls -al 
没有  .oracle-shm
rm -f /dev/shm
mkdir /dev/shm
mount --move /run/shm /dev/shm
mount -B /dev/shm /run/shm
touch /dev/shm/.oracle-shm
df -kh /dev/shm
再连就可以了
再在/etc/fstab中加入
tmpfs  /dev/shm  tmpfs  default  0  0
再启动的时候/dev/shm不用重建