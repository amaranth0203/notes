 * 软件Leader在平台技术开发中的责任是什么
1、向项目经理进行承诺，执行项目确定的活动； 
2、协调软件内部资源，启动软件开发，确保平台开发各项工作得到落实； 
3、组织识别平台开发过程中软件方面的技术风险识别和风险应对措施并跟进落实； 
4、组织解决平台开发过程中的技术问题； 
5、组织识别平台开发中涉及生产线测试工具并安排点检确认，跟进软件在开发过程中配合制造完成； 
6、优化/细化平台开发的工作分解，形成详细计划。

 * 软件系统工程师在平台技术开发中的责任是
1、向项目经理进行承诺，执行项目确定的活动； 
2、分析平台开发需求和对应具体产品新功能需求，做好平台分析，评估可行的总体技术方案及可替代性解决方案； 
3、对技术风险识别和风险应对措施进行把关； 
4、分析和组织解决平台开发过程中重大技术问题； 
5、分析和组织做好平台开发中涉及到的专利布局工作； 
6、识别平台开发中涉及产线测试工具的点检并在软件开发过程中配合制造完成。

 * 什么情况下组织开材料介绍会
1、评审材料结构比较复杂
2、评审材料本身的格式是评审专家没有办法进行自行预览的

 * 技术评审无条件通过的依据
没有遗留问题，或者遗留问题可以得到有效解决。挂起的问题不会影响后续产品开发活动的质量

 * 简述为何要控制Log的打印频率
Log输出的频率需要控制, 特别是UI线程，过多的Log将可能影响性能

 * 代码编写为什么要考虑到内存分配释放操作的合理性
避免产生内存泄露 避免不合理的分配释放引起性能问题

 * 目前哪些模块有使用LargeHeap属性
桌面，浏览器，相机，i主题

 * 为什么在onDraw，dispatchDraw，onTouchEvent，getView，bindView中不要创建如bitmap等耗时对象
上述方法会被频繁调用，应在尽可能短的时间内完成，创建对象易导致大量内存被分配，容易引发GC，导致应用卡顿。

 * 应用怎么在手机低内存时做针对性处理
1、重载OnLowMemory方法，进行后台资源的释放 
2、根据不同level，重载OnTrimMemory方法及时释放多余内存

 * 为何要及时回收不用的资源？
1.资源性对象比如(Cursor，File文件等)往往都用了一些缓冲，我们在不使用的时候，应该及时关闭它们，以便它们的缓冲及时回收内存。 
2.注册广播接收器、注册观察者等等，在完成后需要进行注销以及时回收内存。

 * 在硬件加速中如果不及时释放硬件层会有什么影响
硬件层用于在内存中保存显示纹理，占用大量内存，如果不释放会导致内存泄露

 * 简述BOOT_COMPLETED广播的用法
系统开机完成时，会发送开机完成广播--BOOT_COMPLETED，目的在于让需要开机启动的应用起来工作。

 * java层怎么调用Log系统打印机制
在java层调用import android.util.Log，在需要打印Log的地方执行Log.v,Log.d,Log.i,Log.w,Log.e等

 * C、C++层调用怎么使用Log打印机制
在C,C++层包含头文件#include <cutils/log.h>，然后在需要调用Log的地方执行：ALOGV,ALOGD,ALOGI,ALOGW,ALOGE等。

 * 简述各个等级Log的使用方法
Verbose：不出现在市场产品中。
Debug: 用于调试的信息，编译进产品，可以在运行时关闭。
Info: 例如一些运行时的状态信息，这些状态信息在出现问题的时候能提供帮助；
Warn：警告系统出现了异常，即将出现错误；
Error：系统已经出现了错误。
Info、Warn、Error这三个等级的Log的警示作用依次提高，需要一直保留。这些信息在系统异常时能提供有价值的分析线索。

 * 为了方便产品维护后期问题分析，且在user版本默认关闭的相关Log，怎么处理
给这种类型的Log加宏控开关，只有使用命令打开开关的时候才打印

 * Android平台Log输出规范适用范围
该规范适用于android平台框架代码以及应用代码

 * 实际操作中发现某TAG的Log源文件找不到，而无关紧要的Log又频繁打印，该怎么办
该Log定义文件可能在库文件里面，有必要向对应的芯片厂商提CASE解决

 * 请简述二进制补丁文件需要按照顺序提交的原因
二进制文件我们看不到对应的源代码，不能确定里面改了什么以及这些修改的相互依赖顺序，只有按照释放的顺序来打

 * 请简述打patch的流程
1、本地验证patch。
2、验证OK后上传patch。
3、patch上传后更新补丁记录表。验证和更新记录是重点

 * 往svn仓库中新增文件夹时返回如下内容的原因是什么？ svn：提交失败（细节如下）： svn：服务器发送了意外的返回值（405 Method Not Allowed），在响应“XXXX”
新增的目录在svn仓库中已存在

 * 每发一个系统测试的版本都会有对应的manifest文件记录该版本各个仓取到的分支以及版本。请说出这个manifest文件存在什么地方？以及如何查看某个仓取到的分支和版本？比如发PD1401CL 1.1.0版本时，kernel仓取到的分支和版本
gerrit上的manifest仓里。在gerrit网页上搜到VivoCode/manifest 然后找到对应的项目，这个项目的每日编译和系统测试的manifest都会保留在对应的目录下，然后找到对应版本的manifest文件，打开PD1401CL 1.1.0的manifest文件，找到kernel仓的信息。

 * 本地commit之后pull，在本地产生了一些Merge信息的提交，怎么去掉？
git pull --rebase

 * svn可以选择记住上次操作使用的账号，如何一直使用指定的账号执行命令？
在命令行增加--username参数指定账号

 * 列举三条代码修改上传规范
1、提交前审查修改情况， 用命令svn status/git status浏览所做的修改，svn diff/git diff检查修改的详细信息 
2、提交时，必须填写注释，注释内容清晰描述本次提交内容，变动信息。 
3、做较大修改时，和项目组其他同事的工作相关时，必须通知对方。 
4、纳入版本控制的项目必须定期提交，至少一周提交一次，避免意外事故导致代码丢失。 
5、每次提交后，必须确认工程可正常运行，即SVN/GIT里保存的是可以正确运行的代码，否则恢复至稳定版本。 
6、编译过程动态产生的东西不要提交到服务器 
7、每次提交前先更新，这样能在提交前发现是否和别人的冲突 
8、最好不要随便调整代码格式，遵守最小修改原则（特别是打了产品分支以后）

 * 列举三条使用代码工具管理代码的好处
1、备份工作档案 比如：你的硬盘坏掉了，或者代码不小心被删掉了，可以很好地找回来 
2、版本控制 版本控制的一个好处就是：你可以把修改回退到任意一天之前版本，而且可以详细了解哪一天修改了什么内容 
3、工作伙伴间的数据同步 很多时候，除了你个人外，还有其他的伙伴也需要你的档案。使用代码管理工具就可以很方便地把最新的档案提供给伙伴

 * 列举几个你使用过或者你见过的代码管理工具
1、GIT 
2、SVN 
3、CVS 
4、VSS 等等

 * 用svn st可以查看当前工作副本文件状态，那么请解释以下状态标识分别表示什么 A、C、D、M、？、！
A：增加 
C: 冲突 
D：删除 
M：改变 
？：未纳入版本控制 
！：该项目已遗失(被非 svn 命令删除)或不完整

 * git merge 和git cherry-pick的区别
git merge是用来合并两个分支的 
git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作

 * svn和git权限申请流程
svn权限申请流程为：
先自己注册svn账号，解决好smartphone等hosts问题 
-》 提交联络单给组长或者部长审核批准 
-》 svn管理员开通 
git权限申请流程为：
先自己注册git账号，注册以后框架代码就都可以下载了 
-》 如果需要审核权限，提交联络单给组长审核 
-》 仓库owner添加权限 
-》如果是应用模块，给吴全签收备案

 * svn命令中加--no-ignore参数的作用
忽略默认值和 svn:ignore 属性，比如一些*.o、*.so库等，默认情况下svn会过滤掉这些文件 global-ignores = *.o *.lo *.la *.al .libs *.so *.so.[0-9]* *.a *.pyc *.pyo *.rej *~ #*# .#* .*.swp .DS_Store

 * 开发人员在主线修改的bug，软件代表要求同步到tag分支的时候，发现cherry pick不了，出现冲突，作为bug修改人的你会怎样处理这种问题，简要描述。
更新本地仓库，切换到对应tag分支，手动cherry pick，看看哪里冲突了，根据需要进行手动，然后上库

 * 开发人员在用每日编译版本验证自己修改问题的时候，发现没有生效，如何快速确定该每日编译版本是否合入了你的修改，简要描述。
每日编译版本都会上传manifest文件到git上和ftp服务器上，可以通过这两个位置下载manifest文件，查看对应仓库最后一次提交的commit id，排查你的提交在这次commit id之前还是之后，如果是之前是合入的，之后就是没有合入的，如果还是拿不准，下载代码，reset到manieset表格中的commit id，查看代码是否包含你的修改。

 * 当往mtk或者qcom开头的分支push时会被禁止,提示(cannot upload review),原因是什么？此时应该怎么做？
因为mtk或者qcom开头的分支已经做了权限限制，禁止上传 修改需要上传到vivo开头的分支，如果你是第一个修改这个仓的，还需要同时修改manifest里对应仓的默认分支到vivo分支，才能让别人更新到你的修改 修改manifest后要传到master分支

 * vivoscm配置管理系统里功能包括哪些？
项目信息查询 
仓库Owner与审核者查询 
系统属性查询 
应用模块配置到项目中编译

 * 索bug回复中填写git相关内容哪三部分组成
仓库名+分支名+commit id