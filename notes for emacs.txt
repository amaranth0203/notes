
C-x C-f 之后输入 /sudo:: 会询问密码，接着可以以root权限编辑文件(如hosts)

helm-find-files 和 ido-fine-file 比起来

找 s71200.py 时, helm 可以直接 s py
ido s 之后 空格 会报错

helm( 新窗口 ) 使用 C-n C-p 切换, 
ido( mini buffer ) 使用 C-s C-r 切换.

打开已经打开过的文件 ido 可以在 ido-find-file 之后输文件名直接 M-s 搜索文件
helm 可以借助 bookmarks ( setq bookmark-save-flag 1 )
helm-filtered-bookmarks 命令
也可以使用 recentf 使用 ( setq-default recent-save-file "~/.emacs.d/recentf" )
在不同 emacs 窗体之间共享 recentf 时使用
recentf-save-list 和 recentf-load-list 命令


类似vim里边替换时用 \( \) 来引用
之后再用 \1 \2 来替换的
emacs 也可以 格式也一样
这个功能叫 back reference

C-x C-q 设置/取消只读模式

编辑 c 文件时想要多行赋值对齐
之前的办法是直接用 tab 对齐
emacs 下 c-mode 输入 tab 的方法 :
C-q C-i

C-x C-; comment-line/uncomment-line

C-x ( 开始录制
C-x ) 停止录制
C-x e 播放录制

C-SPC C-SPC 标记当前位置
C-x w . 高亮当前变量( 不起作用时可用 M-s h .)
C-M-a 跳到函数开头
当前页或者稍微往前一两页就会看到变量定义的地方
C-u C-SPC 回到上一个标记
C-x w r 撤销高亮( 可以使用 M-p M-n 切换 )
 -- 其中使用高亮的办法也可以换成用 i-search 来代替，但是变量很短（比如i）的时候效果就比较差（会把其他单词中的i也高亮出来）

C-x RET f 可以改变文件的 CRLF 方式
c(Unix) --
表示 gbk + LF
使用 C-x RET f dos RET
将变成 c\**- 再保存成 c\--- 表示 gbk + CRLF
使用 C-x RET f mac RET
将变成 c(Mac)**- 再保存成 c(Mac)--- 表示 gbk + CR
再使用 C-x RET f unix RET
将变成 c(Unix)**- 在保存成 c(Unix)--- 表示 gbk + LF ( 转一圈回来了 )

C-x RET f 可以改变文件的 encoding 方式
在当前 buffer 的右下角有 c(Unix)---
表示使用的是 Chinese-gbk LF 方式来 encoding
这时输入 C-x RET f utf-8 RET
当前 buffer 右下角的状态就会变成 U(Unix)**-
再保存文件 状态就会变成 U(Unix)---
表示使用 Utf-8 LF 方式编码

C-M-\ indent-region

C-M-h 选中整个函数

C-M-a/e 跳到函数开头/结尾

mark 的时候用 C-x C-x 来来回跳转

C-s 的时候
使用 C-w 就会把当前光标后的一个单词添加到搜索内容中
M-e 修改搜索的内容
M-r 正则表达式
M-c CaseSensitity
M-% query-replace

C-a 跳到绝对行首 M-m 跳到第一个非空白字符处

M-z e 向前删除到 e 第一次出现的地方
C-u 2 M-z e 向前删除到 e 第二次出现的地方
可以结合 C-- 来向后删除
C-- M-z e 向后删除到 e 第一次出现的地方

C-- 执行反方向的命令
例如
C-- M-d 就变成了熟悉的 C-w
C-- C-d 就变成了熟悉的 C-h

M-! 执行系统命令( 例如 explorer . 即可打开当前文件所在目录 )

M-: 执行表达式

M-x dired 查看当前文件所在目录

在 emacs 中使用 ggtags 比较方便
(
  apt-get install global
  package-install ggtags
  find xxx/ xxx/ xxx/ xxx/ -type f > file_list.log
  gtags -vf file_list.log
)

M-% 替换

C-M-f C-M-b 在同一层级之间切换 ( vim % [ ] )

ido/smex 用来补全 文件&buffer / 命令 很好用
C-r C-s 切换
ido :
    M-p M-n 在上/下级目录搜索
    M-s 搜索
    C-t 正则匹配

M-r 移动到屏幕中央

M-x toggle-debug-on-error 可以查看错误 log ( 然后 google )

C-x z 执行上一条 M-x

C-x C-c - 退出

windows下配置文件.emacs在 C:\Users\Administrator.AXX3DX8ZNMSGU5B\AppData\Roaming 下
C-x C-f 可以知道emacs安装路径

*** C-p C-n C-b C-f - 上下左右 (vim : k j h l)
*** C-l - 当前行移动到 中间 （继续按移动到顶端，低端，中间反复）( vim : zz )
*** C-v M-v - 前后翻页(vim : C-f C-b)
*** M-b M-f - 前后移动一个单词(vim : w b e ge )
*** C-a C-e - 行首 行尾( vim : ^ $ )
(M-a M-e - 句首 句尾)
M-< M-> - 文件开头 文件结尾( gg G )
C-u 8 C-f - 执行8次C-f （也可以M-8 C-f,但是通用性不强）

C-g - 中断执行（可以多按几次直到出现Quit为止）
<ESC><ESC> - 取消按错的ESC

C-h k C-f - 显示C-f命令的文档( vim :  :help xxx )
C-x u 
C-/
C-_
 - 以上三个都是 Undo ( vim : u )

C-d - delete
M-d - delete
C-k - 删除光标到行尾之间的内容
M-k - 删除光标到句尾之间的内容（用的比较少吧）

C-@ - mark set
 - mark set 之后不能用C-d删除选择的内容，可以使用剪切达到删除的目的( vim : v / C-v（块插入））

C-w - cut
M-w - copy
C-y - paste
M-y - paste在很多个剪切板的内容之间切换
( vim : d(剪切) )



M-x repl（补全）s（补全）- M-x replace-string - 替换字符串（被选中的部分进行，没有选中的话则对光标之后的部分进行）
M-x fund（补全） - M-x fundamental-mode - 返回主模式


C-x f - 设置行宽
M-q - 以新的行宽刷新buffer

C-s - 向后搜索
C-r - 向前搜索
 - 匹配成功后 使用C-s C-r来前后跳转
 - 回车停在搜索到的地方，C-g则会跳回到之前发起搜索的地方
( vim :  /str回车，然后nb来前后跳转）

C-x C-f - 打开文件( vim :  :open filename)
C-x C-s - 存储文件( vim :  :w )
	存储的时候如果目录不存在
M-x make-directory 创建目录
C-x s - 存储所有被修改过的文件（逐一询问是否）
C-x C-b - 列出已经打开的文件（buffer）
C-x b - 输入buffer名字切换过去
C-x k - kill buffer
C-x 0 关闭当前窗格
C-x 1 只留下当前窗格
C-x 2 分割出一个窗格（分成上下）
C-x 3 分割出一个窗格（分成左右）
C-M-v 对新的窗格向后翻页
C-M-S-v 对新的窗格向前翻页
C-x o 切换到其他(other)窗格
C-x 4 C-f 在新的窗格中打开文件
( vim : vs / sp / C-w )

M-x make-frame - 创建新的窗口（但是新的字体设置并没有被导入）
M-x delete-frame - 删除（关闭）当前窗口（只剩下一个窗口的时候失效）

C-h c - 相当于 C-h k ( 查看key的帮助文档）
C-h f previous-line - 查看函数(function)的帮助文档
C-h v 查看变量(variable)的帮助文档
C-h a - 输入关键字来查找帮助文档

C-h i 阅读手册（进去之后按?)

( vim : :help xxx )


