分段:

*CI :
...
*APACHE :
...
*PHP :
...




*CI :

route 里边的前后排列顺序也会影响效果





*APACHE :
打开
LoadModule rewrite_module modules/mod_rewrite.so
修改
    AllowOverride All
之后在 documentroot 下边
创建 .htaccess 文件
文件内容
RewriteEngine On
RewriteCond $1 !^{index\.php|resources|robots\.txt}
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 [L,QSA]
即可去掉 localhost/index.php/foo/bar
中的 index.php 
直接访问 localhost/foo/bar
如果是 CI 里边
再把 config['index_page'] 从 'index.php' 改成 ''
不然在使用相关 api 的时候还是会有 index.php 在里边



加入
<DirectoryMatch "^E:/Sources/php/DocumentRoot/priv_(.+)">
    Allow from None
    Order allow,deny
</DirectoryMatch>
之后
在浏览器就没有访问 priv_ 开头的目录的权限了

在 win 7 下
除了配置 ServerRoot DocumentRoot ServerName 之外
还要写 
LoadModule php5_module "%PHP_HOME%/php5apache2.dll"
AddHandler application/x-httpd-php .php .html
    ( .html 是为了在 html 文件中也能解释 php 代码 )
PHPIniDir "%PHP_HOME%"

( 可以使用 httpd -M 查看已经加载的模块有没有 php 的 ( linux 下使用 apachectl -M ) )

再把 %PHP_HOME% 下边的 php.ini-development 复制一份作为 php.ini
之后打开
extension_dir = "ext"
extension=php_mysql.dll
extension=php_mysqli.dll
的注释







*PHP :

传进来的参数 空格之类的会被浏览器转义成 urlcoding
可以用
$slug = urldecode( $slug ) ;
来转换成原始的字符串

查看 request 的 header :
$headers = apache_request_headers();
foreach ($headers as $header => $value) {
    error_log( "$header: $value" );
}

部署出去的php代码可以用 error_log 来打印 log 到apache目录下的logs的error.log中

require 或者 require_once 的时候
使用 require_once( $_SERVER['DOCUMENT_ROOT'].'/priv_handler/handler.php' ) ;
来确定路径

http://phpdao.com/
相当于代码生成器，生成对数据库的操作类（DAO）
使用的方法比较旧，后边可以自己改良一下
按照官网的指导 :
生成 :
- Download latest version of DAO generator for PHP and Mysql
- unzip file
- set connection to database properties in file templates/class/dao/sql/ConnectionProperty.class.php
- run file generate.php (for example: http://localhost/phpdao/generate.php)
- generated classes will put in 'generated' folder 
使用 :
Application generate three classes for one table (table must contain primary key). 
First class is Domain Transfer Object
Second is interface that define operations on table
Third class implements preceding interface
----
require_once('include_dao.php');
$transaction = new Transaction();
$file = new File();
$file->name = "testfromdao" ;
DAOFactory::getFilesDAO()->insert($file);
$transaction->commit( ) ;
----
更具体的用法可以下载 http://phpdao.com/testdao.zip 并且导入里边的数据库查看
主要要注意生成的 Domain Transfer Object 里边的字段是直接使用表的字段，然后把第一个字母小写

handle.php?xxx=xxx&xxx=xxx
会直接把请求发到 handle.php 中
在 handle.php 里边使用 $_REQUEST $_GET $_POST 就可以直接获取参数
在 handle.php 可以使用函数 header( "Access-Control-Allow-Origin: *" ) ; 来添加响应头
之后使用 echo 或者 print 即直接响应请求( echo plain txt / echo xml )

print_r 用来打印整个数组的结构
var_dump 也可以打印整个数组的结构，并且附加键值对的类型

foreach( $arr as $value )  - 传值
foreach( $arr as &$value ) - 传址

foreach( $arr as $value ) { }
while( list( , $value ) = each( $arr ) ) { }

foreach( $arr as $key => $value ) { }
while( list( $key , $value ) = each( $arr ) ) { }

break 2 ; 跳出两层

require vs include :
    -- 这条语句出现错误（例如文件不存在）时
    -- require 退出
    -- include 继续执行
    -- 看词语本身的语气来记忆

$foo::bar( )  ->  访问类属性

$foo = new Foo ;
echo $foo->bar( )  ->  访问实例的属性