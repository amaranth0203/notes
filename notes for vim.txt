
Bachspace
    C-h
Enter
    C-j C-m
Tab
    C-i
从光标处删到当前行开头
    C-u

masm 编译的时候不识别 utf-8 的中文
可以使用 iconv -f utf-8 -t gbk xxx.rc > xxx.rc.new
来转换
也可以直接 :set fileencoding=gbk 之后 :write 保存


启动很慢的时候，使用
vim_ --startuptime st
可以把启动过程保存到文件 st 中
（例如可以看到 nerdtree 的 ui_glue.vim 耗时最长，特别是网络波动的时候）


自己编译
使用 nmake -f src/Make-mvc.mak
nmake : 
    在 cmd 或者 cmder 导入
    32 位 :
        VS_PATH/VC/vcvarsall.bat
        VS_PATH/Common7/Tools/VsDevCmd.bat
        均可
    64 位 :
        VS_PATH/VC/vcvarsall.bat amd64
        ( 自己打开脚本看里边的参数 )
    
vim.exe :
    32 位和 64 位与 python 版本要对应
    目前 2.7.9 可用 
    2.7.10 2.7.11 不可用
    python 要卸载干净再安装，不然版本号一直不变
        （版本号一直不变是因为system32下边有几个dll文件）
gvim.exe :
    只用 VsDevCmd.bat 编译成功一次 32 位不带 python 的
    之后再没编译成功过
    无法得知使用关系



设置光标闪烁速度
set guicursor=a:blinkwait100-blinkoff100-blinkon100

禁止注释自动补全
au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o


当不知道哪个插件自动缩进的时候
出现自动缩进的情况后
使用
    verbose set autoindent?
    verbose set smartindent?
    verbose set cindent?
    verbose set indentexpr?
来查看哪个脚本修改了这些属性 该删就删

注册表右键添加 vimrc 参数的位置 :
HKEY_LOCAL_MACHINE\SOFTWARE\Vim\Gvim
path里边

:redir @+ | set rtp | redir END
把命令输出的结果保存到寄存器里边

字体
https://github.com/eugeii/consolas-powerline-vim

在 vimrc 里边
如果使用 
autocmd VimEnter * :set
autocmd VimEnter * :let
autocmd VimEnter * call XXXXX( ) 然后 XXXXX 里边 有 let 和/或 set
的话
会导致其他直接 set 或者 let 的部分无效
而且使用 autocmd 初始化的和插件有关的变量
例如 enabled=1 等，无法起到 enable 的作用
所以 set 和 let 都直接使用
不要用 autocmd 

set nomagic 之后搜索就不带 regex 了

y复制了一些东西之后
在 : 或者 / 里边
可以用 C-r " 粘贴上去
比 q: 快一点
如果是系统的粘贴板
就用 C-r +

normal 模式下有些命令/映射开头相同
执行比较短的命令的时候会有个等待间隔
比如 \ne 是打开 NERDTree 
     \neb 是 :Bookmark
\ne 之后不会立即打开 NERDTree
这个时候可以再按一次 空格 表示命令完成
( 按回车 <leader> 之类的也可以，但是会有副作用 )

NERDTree
I
显示隐藏文件/目录
C
把当前目录作为 root 目录

NERDTree
在打开 NERDTree 之后
:Bookmark xxx 
把光标所在的目录/文件作为 xxx 书签
:ClearBookmarks xxx
删除 xxx 书签
B
显示所有书签

NERDTree 在一个目录上边 m 之后 选择 a 添加结点即可新建文件

S 清除当前行的内容并进入插入模式
选中多行 之后 :normal A; ( 或者 :norm A; ) 可以在这些行后边添加;
( 即都执行 normal 模式下的 A; 命令 )

:ls
:ls!
可以显示打开过的 buffer
:b N
跳转到 :ls 列出来的第 N 个 buffer ( 这个 N 不会改变 )
:bd
关闭buffer
:e filename
打开一个buffer

vs sp 之后 可以用 C-w r 来切换对等窗口的位置( 推进滚动 )

不停地dd dd
之后删（剪切）掉的内容会保存在寄存器里边
上一个在"1里边
再来一个则从"1进行压栈:
    上一个在"1里边
    上上个在"2里边
再来一个则又从"1进行压栈:
    上一个在"1里边
    上上个在"2里边
    上上上个在"3里边
以此类推

:r 读取文件，输入到当前光标所在位置
:r!cat
之后随意输入，再以 ctrl-d 结束
可以用来粘贴到vim 避免自动缩进
也可以用autocmd BufRead * :set formatoptions-=cro来避免

使用ctags/cscope跳转之后，如果有多个相同的tags。。。
可以使用 :tn 或者 :tp 跳转到相同的 下/前 一个tags处

gd : 跳转到局部变量的定义处
gD : 跳转到全局变量的定义处

分割窗口之后
c+w w 轮转切换
c+w hjkl 往各自代表的方向跳
c+w +-  窗口纵向大小调整
c+w <>  窗口横向大小调整
10c+w +-<>   调整10格
c+w =   平分

c+w q 退出当前窗口

映射 alt+j 键 <A-j>  <M-j> 都没效果的时候:
sed -n l
之后输入 alt+j 得到 ^[j
之后使用 <esc>j 即可映射

在C:\windows\gvim.bat
和HKEY_LOCAL_MACHINE\SOFTWARE\Vim\Gvim的path里边
都添加参数 -u xxx\.qyh_vim\vimrc
即可使用自己的参数

在( [ { ' "
上边使用 di( di[ di{ di' di"可以删除被它们扩起来的内容

编辑模式下边
    c+d c+t 左右缩进(命令模式为 <<和>>)
    c+x+i 补全关键字
    c+x+f 补全路径
          在补全的时候使用c+p和c+n上下切换
    c+w 往回删一个词
    c+u 往回删到行首

:set tags?
可以看到 tags 现在的值
:set list
查看看不到的字符
:r !cmd
插入cmd的执行结果

:earlier  回到过去的代码状态
:later    回到（过去的）未来的代码状态

c-a c-x : 自增 自减

查看完整文件路径 1 c-g

help: c-g 查看 Ctrl + g 的意义
help: s-h 查看 Shift+ h 的意义

折叠:
zf打折叠记录于是
zf%相当于notepad++折叠大括号
展开 zo
折叠/展开所有: zi
zE清除所有

ctags (vim 自带):
在当前目录下运行 ctags -R 递归生成tags文件然后:set tags=生成的tags文件
如果tags刚好和源文件在一个目录，直接运行vim即可
使用*可以跳到下一个相同的关键字（不需要tags文件）
使用C+]可以跳到定义处（需要tags文件）
然后使用C+T可以跳回之前使用C+]的地方
最好使用 ctags -R -f .tags --languages=C --langmap=c:+.ccs
指定生成的文件为 .tags
因为 sublime 默认使用的文件名是  .tags
--> 不用了  sublime 右键文件夹可以直接生成

cscope :
在当前目录下运行 cscope -R / -Rbkq 生成cscope.xxx文件
运行vim后使用 cs add .添加生成的文件
接着就可以使用命令了
cs find c xxxxxxx
xxxxxx为要查找的关键字
为了省去麻烦可以映射快捷键
nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
在关键字上Ctrl + Shift + - 然后再按c就可以查找所有的caller
在vimrc中添加cs add /a/b/c/(cscope.in cscope.out等文件都在这个目录)
查找函数的caller，跳转过去的时候却提示文件不存在
是因为cscope使用的是相对路径（具体错误原因不深究）
这时候可以把vimrc中的语句改成
cs add /a/b/c/ /a/b/c/
强迫使用绝对路径

%s/\(.*case\(.*\):.*\n\)\(\_.\{-}break;\)/\1new_line_1\rnew_line_2\2new_line_3\rnew_line_4\r\3/g

在
case CASETAG :
    ...
    break ;
插入debug信息:
case CASETAG :
new_line_1
new_line_2 CASETAGnew_line3
new_line_4
    ...
    break ;
之后再替换成想要的
\_.代表 match any single character including newline
(注意 \_. 会作为.匹配掉一个字符)
.*为贪婪匹配
.\{-}为非贪婪匹配

最后结果为
case CASETAG :
#ifdef DEBUG_qiyunhu
ALOGE( "[+] case <=================================\n" ) ;
#endif
    ...
    break ;
去掉的时候用
%s/\(.*case.*\n\)\(#.*\n.*\n#endif\n\)\(\_.\{-}break;\)/\1\3/g



S+h / S+l : 光标跳到当前视图的第一行/最后一行的开始处
S+j : 把下一行开头的空格符全部删除，合并到这行最后边，中间再插入一个空格
S+k : 打开光标所在关键字的手册（于是vim是读linux代码最方便的工具）

S+y : 行复制,之后p的时候会直接另起一行
S+p : 行复制之后p在该行上边（类似S+o）
在没有进行行复制的时候，
    p   : 粘贴在方块光标的右边（类似A）
    S+p : 粘贴在方块光标的左边（类似I）


C+o 跳回到光标上一次所在
C+i / Tab 和C+o相反
`` 来回跳转



正常模式下输入 q:
可以将准备要输入的命令放到编辑模式下编辑（就是可以粘贴要执行的命令或者命令里边有输不出来的特殊字符需要粘贴







快捷键：
shift + i	在行首插入
shift + a	在行尾追加
ctrl + e/w	下/上翻一行（连贯性最好）
e/b		相当于ctrl+右/左
%		跳到匹配的括号
	(ctrl + d/u	下/上翻半页)
	(ctrl + f/b	下/上翻一页)
shif + m	光标置于页中
	(zt		当前行移动到页首)
zz		当前行移动到页中
	(zb		当前行移动到页尾)
	(gg		相当于:1)
	(G		相当于:$)
$		行尾
^		行首（非空白）
0		行首
	(nG		相当于:n)
ctrl+g		显示当前行所在位置




set guifont=*	可以打开字体选择界面，之后再查看修改到配置文件里边

vim -b (以binary模式打开(看得到^M))

:write ++enc=utf-8 filename
 - 把filename的编码格式转换成utf-8（不加filename）转换当前文件
