C -- Carry (进位(无符号运算
P -- Parity (二进制偶数个1
A -- 辅助进位
Z -- Zero (为零
S -- Signed (负数
T
D
O -- Overflow (溢出


bit -- 0 或者 1
byte -- 字节(8bit)
word -- 字(2byte)(16bit)
DWORD -- 双字(2word)(4bit)(32bit) 也可以理解成一个字

odbg里边的操作默认都是DWORD（因为数据总线是32位）

ADD BYTE  PTR DS:[75000011] , 1
ADD WORD  PTR DS:[75000011] , 1
ADD DWORD PTR DS:[75000011] , 1
 - 所加到的位置都相同
 - 不同：当75000011为0ff的时候
    - BYTE直接溢出，变0,WORD和DWORD可以进位再变零

ADD , ADC
SUB , SBB
 - 不带符号，带符号

CMP EAX,ECX
	if( eax == ecx ) z = 1 else z = 0 ;//即eax-ecx=0,为零位置1
	if( eax < ecx )  s = 1 else s = 0 ;//即eax-ecx<0,负数位置1

TEST EAX,EAX
	if( eax && eax ) z = 0 else z = 1 ;//检测是否所有位上都为0
	当eax从一个大于零的数递减到0的时候，Z为 0 0 0 0 0 0 0 0 0 0 1

XOR EAX , EAX ， 置0

在call的地方右键/Enter→follow可以进去看看附近的内容并不执行，接着：
1 F8直接执行到call的下一条
2 按-回到call

LOOP命令使用ECX寄存器

CTRL+N能看到所有被引用进来可以直接调用的函数
 - API的名称列表

在数据上边设置
1 内存断点 - 会在当前访问语句停下来
2 硬件断点 - 会在访问语句发生之后，下一条语句上停下来

消息断点可以获取很多运行时的信息（特别是地址）

对于C语言的取地址(&)和取内容(*)操作 :
假设   0x00001234: lable dw 2222h
   LEA EAX , lable
   MOV EAX , OFFSET lable
    - 以上两条作用相同，都是取lable的地址0x1234存入EAX中, EAX = 0x00001234
    - 相当于C语言对变量的取地址(&)操作
   MOV EAX , DWORD PTR[0x00001234]
    - 取地址0x00001234里边的内容存到EAX中，EAX=2222h
    - 相当于C语言对指针的取内容(*)操作
而在OD中常见的LEA的用法为
   LEA EAX,DWORD PTR SS:[EBP-8]
    - 在C中相当于 EAX = *(&(EBP-8)) , 即EAX = EBP - 8
    - 可以理解成 MOV EAX , EBP - 8，而实际中这条指令无法执行起来
    - LEA可以用于对齐代码

XOR 异或 ， 于是
XOR ECX , ECX 将ECX置零

SEH结点的结构：前4个字节指向下一个SEH结点的地址，后四个字节为当前的异常处理程序入口
安装SEH的语句：
PUSH &HANDLE
MOV EAX,DWORD PRT FS:[0]
PUSH EAX
MOVE DWORD PTR FS:[0],ESP // FS:[0]指向当前SEH结点

	move eax , xxxxxxxx
	push eax
	retn
相当于 
	jmp xxxxxxxx
