
ALOGE用不了的时候 :
#include <android/log.h>
之后
#define LOG_EMERG   0   /* system is unusable */
#define LOG_ALERT   1   /* action must be taken immediately */
#define LOG_CRIT    2   /* critical conditions */
#define LOG_ERR     3   /* error conditions */
#define LOG_WARNING 4   /* warning conditions */
#define LOG_NOTICE  5   /* normal but significant condition */
#define LOG_INFO    6   /* informational */
#define LOG_DEBUG   7   /* debug-level messages */
然后输出
__android_log_print( LOG_ERR , "wassup", "%s", __func__ ) ;
或者直接用
__android_log_print( 3 , "wassup", "%s", __func__ ) ;
来输出


在mk中输出信息:
$(warning $(LOCAL_PATH))


当前目录下有两个文件夹 a 和 1 
然后有这样的目录结构
a/b/c/d/Android.mk
1/2/3/4/Android.mk

然后当前目录下的 Android.mk 可以直接写
LOCAL_PATH := $(call my-dir)
include $(LOCAL_PATH)/a/b/c/d/Android.mk
然后编译
也可以直接写
LOCAL_PATH := $(call my-dir)
include $(LOCAL_PATH)/1/2/3/4/Android.mk
然后编译
但是，不能写
LOCAL_PATH := $(call my-dir)
include $(LOCAL_PATH)/a/b/c/d/Android.mk
include $(LOCAL_PATH)/1/2/3/4/Android.mk
这样编译只能识别到一个文件，因为 include 之后 被include的文件( a/b/c/d/Android.mk ) 有可能会改变 LOCAL_PATH 的定义
解决方法:
一路放包含一层子文件夹的 Android.mk到后边去
include $(call all-subdir-makefiles)

msm8976丢log.. 可以试着写入文件 这样就不会丢了

Android.mk中
若设置 LOCAL_PROPRIETARY_MODULE := true
则编出来的库文件是在 /system/vendor/lib ( qcom )
否则在 /system/lib ( mtk )

Android.mk里边的
	$(CLEAR_VARS)
	$(call my-dir)
	$(BUILD_SHARED_LIBRARY)
	$(BUILD_EXECUTABLE)
等等等等，不能写成$( CLEAR_VARS )
注意括号里边的空格...（冷笑）



installing
/etc/bash.bashrc
~/.bashrc
root login & nautilus-open-terminal & vmtools & network
/root/.profile
mesg -n   --->   tty -s && mesg -n
reboot
aptitude & curl & vim & samba & ssh
.vimrc .ssh 
git & openjdk7(check version first) & repo
apt-get install python-xlrd
sudo apt-get install git gnupg flex bison gperf build-essential \
  zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \
  libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \
  libgl1-mesa-dev g++-multilib mingw32 tofrodos \
  python-markdown libxml2-utils xsltproc zlib1g-dev:i386
其中libgl1-mesa-glx:i386如装不了就装libgl1-mesa-glx
scp /usr/local/bin/repo
! repo init username
scp $w/.repo/manifest.xml
! repo sync
scp
	~/.ssh
    ?	/usr/bin/cms
	/usr/bin/remote_signing.sh ( 被build/core/Makefile调用 )
	/usr/bin/remote_signing.py ( 被remote_signing.sh调用 )
hack a sys.exit(0) before first executed command of 
 1 /usr/bin/remote_signing.py
 2 vendor/vivo/host/bin/sign[apk,boot,*].py
! make


auto eth0
iface eth0 inet static
address 192.168.137.44
netmask 255.255.255.0
gateway 192.168.137.1
dns-nameservers 8.8.8.8 192.168.1.1

if [ $(id -u) -eq 0 ] then ;
    PS1="\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n# "
else
    PS1="\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n\$ "
fi


ubuntu下启动sdk manager，修改 ~/.android/androidxxx.cfg添加proxy无效之后，使用ps aux 过滤 manager 得到以下命令
java -Xmx256M -Dcom.android.sdkmanager.toolsdir=/home/qiyunhu/tools/adt-bundle-linux-x86_64-20140702/sdk/tools -classpath /home/qiyunhu/tools/adt-bundle-linux-x86_64-20140702/sdk/tools/lib/sdkmanager.jar:/home/qiyunhu/tools/adt-bundle-linux-x86_64-20140702/sdk/tools/lib/swtmenubar.jar:/home/qiyunhu/tools/adt-bundle-linux-x86_64-20140702/sdk/tools/lib/x86_64/swt.jar com.android.sdkmanager.Main sdk
之后在参数里边添加 -Dhttp.proxyHost=192.168.3.152 -Dhttp.proxyPort=2333 -Dhttps.proxyHost=192.168.3.152 -Dhttps.proxyPort=2333 
即可使用proxy

eclipse下编译安卓项目出现the container 'android dependencies' references non existing library appcompat_v7.jar的时候
先清理appcompat_v7项目，编译appcompat_v7项目
然后再清理依赖于appcompat_v7的项目即可

smali文件里边分号一定要紧跟前边的字符，中间不可以有空格





http://developer.android.com/training/basics/firstapp/building-ui.html#LinearLayout

C-f - 搜索
C-S-f - 搜索
